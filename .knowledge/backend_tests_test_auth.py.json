{"is_source_file": true, "format": "Python", "description": "Unit tests for backend authentication routes in a Flask application, covering registration, login, token issuance, and error scenarios.", "external_files": ["app", "app.models", "werkzeug.security"], "external_methods": ["app.create_app", "app.db", "app.models.User", "werkzeug.security.check_password_hash"], "published": [], "classes": [], "methods": [{"name": "client()", "description": "Fixture that creates a test client for the Flask app with in-memory database setup.", "scope": "", "scopeKind": ""}, {"name": "register(client, email=\"foo@bar.com\", password=\"12345678\")", "description": "Helper function to send registration POST request with email and password.", "scope": "", "scopeKind": ""}, {"name": "login(client, email=\"foo@bar.com\", password=\"12345678\")", "description": "Helper function to send login POST request with email and password.", "scope": "", "scopeKind": ""}, {"name": "test_register_and_login(client)", "description": "Test case to verify registration and login functionalities, including presence of access tokens.", "scope": "", "scopeKind": ""}, {"name": "test_double_registration(client)", "description": "Test case to check registration conflict when registering the same user twice.", "scope": "", "scopeKind": ""}, {"name": "test_login_invalid(client)", "description": "Test case to verify login failure with wrong password.", "scope": "", "scopeKind": ""}, {"name": "test_user_model_password_hash(client)", "description": "Test case to verify that stored password is properly hashed and matches the original password.", "scope": "", "scopeKind": ""}], "calls": ["app.create_app", "db.create_all", "db.drop_all", "client.post", "rv.get_json", "check_password_hash", "User.query.filter_by"], "search-terms": ["test_auth.py", "Flask testing", "pytest fixture", "auth registration", "auth login", "access_token", "password hash"], "state": 2, "file_id": 14, "knowledge_revision": 35, "git_revision": "", "ctags": [{"_type": "tag", "name": "client", "path": "/home/kavia/workspace/code-generation/pronet-connect-127616-127626/backend/tests/test_auth.py", "pattern": "/^def client():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/pronet-connect-127616-127626/backend/tests/test_auth.py", "pattern": "/^def login(client, email=\"foo@bar.com\", password=\"12345678\"):$/", "language": "Python", "kind": "function", "signature": "(client, email=\"foo@bar.com\", password=\"12345678\")"}, {"_type": "tag", "name": "register", "path": "/home/kavia/workspace/code-generation/pronet-connect-127616-127626/backend/tests/test_auth.py", "pattern": "/^def register(client, email=\"foo@bar.com\", password=\"12345678\"):$/", "language": "Python", "kind": "function", "signature": "(client, email=\"foo@bar.com\", password=\"12345678\")"}, {"_type": "tag", "name": "test_double_registration", "path": "/home/kavia/workspace/code-generation/pronet-connect-127616-127626/backend/tests/test_auth.py", "pattern": "/^def test_double_registration(client):$/", "language": "Python", "kind": "function", "signature": "(client)"}, {"_type": "tag", "name": "test_login_invalid", "path": "/home/kavia/workspace/code-generation/pronet-connect-127616-127626/backend/tests/test_auth.py", "pattern": "/^def test_login_invalid(client):$/", "language": "Python", "kind": "function", "signature": "(client)"}, {"_type": "tag", "name": "test_register_and_login", "path": "/home/kavia/workspace/code-generation/pronet-connect-127616-127626/backend/tests/test_auth.py", "pattern": "/^def test_register_and_login(client):$/", "language": "Python", "kind": "function", "signature": "(client)"}, {"_type": "tag", "name": "test_user_model_password_hash", "path": "/home/kavia/workspace/code-generation/pronet-connect-127616-127626/backend/tests/test_auth.py", "pattern": "/^def test_user_model_password_hash(client):$/", "language": "Python", "kind": "function", "signature": "(client)"}], "hash": "e2bc4af186f5a7048dac0db5256b08e7", "format-version": 4, "code-base-name": "backend", "filename": "backend/tests/test_auth.py", "revision_history": [{"35": ""}]}